Relational Database commands and functions (PostgreSQL)


Commands 

    CREATE DATABASE database_name;                                      -   To create a new database 
    CREATE TABLE table_name();                                          -   To create a new table inside the working database
        CREATE TABLE table_name(column_name DATATYPE PRIMARY KEY)       -   To create a table with primary key in one stretch 
    \l                                                                  -   To list the databases available 
    \c (database_name);                                                 -   To connect to the database
    \d                                                                  -   To display the contents of the table while inside 
                                                                            the  particular database
        \d table_name;                                                  -   To display a particular table   

    ALTER TABLE table_name ADD COLUMN column_name data_type;            -   To add a column in the required table 

        data_type 

            1. INT 
            2. VARCHAR (30)
            3. SERIAL                                                   -   Automatically numbers the contents from 1 -> n
            4. DATE                                                     -   For entering dates (Should be entered in string format)
            5. NUMERIC (4,1)                                            -   For 4 digits and one of them has to be right of the decimal 

    ALTER TABLE table_name DROP COLUMN column_name;                     -   To remove the column   
    ALTER TABLE table_name RENAME COLUMN column_name To new_name;       -   To rename the column   

    INSERT INTO table_name (column1, column2) VALUES (row1, row2);      -   To add rows(values) to the table 

    SELECT * FROM table_name;                                           -   To view the column data in the table 
    DELETE FROM table_name WHERE condition;                             -   To delete a record (condition -> username='name')
    DROP TABLE table_name;                                              -   To delete a table
    DELETE FROM table_name WHERE condition                              -   To delete a particular data 


    ALTER DATABASE database_name RENAME TO new_name;                    -   To rename the database 
    
    UPDATE table_name SET column_name = new_data WHERE condition        -   To update or replace a data 

    SELECT * FROM table_name ORDER BY column_name                       -   To Order contents in the table with respect to the entity

    ALTER TABLE table_name ADD PRIMARY KEY(column_name);                -   To set a column as a primary key (there can be only one primary key in a table)
    ALTER TABLE table_name DROP CONSTRAINT constraint_name;             -   To remove the current constraint (shown in indexes below the table)
    ALTER TABLE table_name DROP CONSTRAINT foreign_key_name;            -   to remove the foreign key 


To create a foreign key for relating rows from two tables


    ALTER TABLE table_name2 ADD COLUMN column_name1 DATATYPE REFERENCES referenced_table_name(referenced_column_name);
    
        // In this process a new column is created in the second table and referenced to the first table. 

    ALTER TABLE table_name ADD FOREIGN KEY (column_name) REFERENCES table_name(column_name);

        // To make a column as foreign key in the process of creating Junction tables 

Enforcing a UNIQUE constraint to the foreign key 

    ALTER TABLE table_name2 ADD UNIQUE(column_name1);

Setting column to be NOT NULL

    ALTER TABLE table_name2 ALTER COLUMN column_name1 SET NOT NULL; 

Setting NOT NULL and UNIQUE while creating a column 

    ALTER TABLE table_name ADD COLUMN column_name DATATYPE NOT NULL UNIQUE; 

Finding the details of a particular row 

    SELECT column_name, column_name,.. FROM table_name WHERE condition; // column_name are the requried data to be viewed


Command to view two linked tables (JOIN)

    SELECT * FROM table1 FULL JOIN table2 ON table1.primary_key_column = table2.primary_key_column; 

Command to view two many to many lined tables via junction table

    SELECT * FROM junction_table
    FULL JOIN table_1 ON junction_table.foreign_key_column = table_1.primary_key-column
    FULL JOIN table_2 ON junction_table.foreign_key_column = table_2.primary_key-column;

